Q.1]10 MARKS Write a python program to find the repeated items of a tuple.

def find_repeated(tup):
    # Convert the tuple to a set to remove duplicates
    tup_set = set(tup)
    # Initialize an empty list to store the repeated items
    repeated = []
    # Iterate through the set of unique items
    for item in tup_set:
        # If the item appears more than once in the tuple, add it to the list of repeated items
        if tup.count(item) > 1:
            repeated.append(item)
    # Return the list of repeated items
    return repeated

# Test the function with a sample tuple
print(find_repeated((1, 2, 3, 2, 3, 4, 3)))
****************************************************************************************************
Q.2]20 MARKS Write a python program with user defined function which accept long string containing 
multiple words and it return same string with the words in backwards order.

def reverse_words(string):
    # Split the string into a list of words
    words = string.split()
    # Reverse the list of words
    words.reverse()
    # Join the reversed list of words into a single string
    reversed_string = ' '.join(words)
    # Return the reversed string
    return reversed_string

# Test the function with a sample string
print(reverse_words('This is a sample string'))
***************************************************************************************************
				OR
Q.2]20 MARKS 
OR QUESTION Define a class Employee having members – id, name, department, salary. Create a 
subclass called ―Manager with member bonus. Define methods accept and display in both 
the classes. Create n objects of the Manager class and display the details of the manager 
having the maximum total salary (salary + bonus).


class Employee:
    def _init_(self, id, name, department, salary):
        self.id = id
        self.name = name
        self.department = department
        self.salary = salary
    
    def accept(self):
        self.id = input('Enter employee ID: ')
        self.name = input('Enter employee name: ')
        self.department = input('Enter employee department: ')
        self.salary = input('Enter employee salary: ')
    
    def display(self):
        print(f'ID: {self.id}')
        print(f'Name: {self.name}')
        print(f'Department: {self.department}')
        print(f'Salary: {self.salary}')

class Manager(Employee):
    def _init_(self, id, name, department, salary, bonus):
        super()._init_(id, name, department, salary)
        self.bonus = bonus
    
    def accept(self):
        super().accept()
        self.bonus = input('Enter manager bonus: ')
    
    def display(self):
        super().display()
        print(f'Bonus: {self.bonus}')

# Create a list of Manager objects
managers = [Manager(1, 'John', 'Marketing', 50000, 10000), 
            Manager(2, 'Jane', 'Sales', 60000, 15000), 
            Manager(3, 'Bob', 'HR', 45000, 7000)]

# Find the manager with the highest total salary (salary + bonus)
max_salary = 0
max_manager = None
for manager in managers:
    total_salary = manager.salary + manager.bonus
    if total_salary > max_salary:
        max_salary = total_salary
        max_manager = manager

# Display the details of the manager with the highest total salary
print('Manager with highest total salary:')
max_manager.display()