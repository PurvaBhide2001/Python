Q.1]10 MARKS Write a python program to find square of given number using list comprehension

def find_square(num):
    # Use list comprehension to calculate the square of the number
    square = [i**2 for i in [num]]
    # Return the square
    return square[0]

# Test the function with num = 5
print(find_square(8))
************************************************************************************************

Q.2]20 MARKS Write a python program which will find all such numbers which are divisible by 3 and 
not by 7 within given range m to n

def find_numbers(m, n):
    # Initialize an empty list to store the numbers
    numbers = []
    
    # Iterate through the range of numbers from m to n
    for i in range(m, n+1):
        # If the number is divisible by 3 and not by 7, add it to the list
        if (i % 3 == 0) and (i % 7 != 0):
            numbers.append(i)
    
    return numbers

# Test the function with m = 10 and n = 20
print(find_numbers(10, 20))
********************************************************************************************
					OR

Q.2]20 MARKS OR QUESTION  Write a python program to reverse each word of file and also count total lines. 

def reverse_words_in_file(filename):
    # Initialize a counter for the number of lines
    line_count = 0
    
    # Open the file in read mode
    with open(filename, 'r') as file:
        # Read each line of the file
        for line in file:
            # Split the line into words
            words = line.split()
            # Reverse each word
            reversed_words = [word[::-1] for word in words]
            # Join the reversed words into a single string
            reversed_line = ' '.join(reversed_words)
            # Print the reversed line
            print(reversed_line)
            # Increment the line counter
            line_count += 1
    
    # Print the total number of lines
    print(f'Number of lines: {line_count}')

# Test the function with a sample file
reverse_words_in_file('sample.txt')